buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
    }
    dependencies {
        //Defaults to Java 8 & UTF-8 encoding
        classpath 'com.github.GTNH2:ForgeGradle:061ac05b6c'
    }
}

apply plugin: 'groovy'
apply plugin: 'forge'
apply plugin: 'maven'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

allprojects {
    apply plugin: 'java'
}

version = "${config.minecraft.version}-${config.yamcore.version}"
group= "eu.usrv" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "YAMCore"

minecraft {
    version = "${config.forge.version}"
    runDir = "eclipse"
	
    replaceIn "src/main/java/eu/usrv/yamcore/YAMCore.java"
	def versionArray = project.version.tokenize('-')
	if (versionArray.size() == 3)
	{
		replace "GRADLETOKEN_VERSION", versionArray[1] + "-" + versionArray[2]
	}
	else
	{
		replace "GRADLETOKEN_VERSION", versionArray[1]
	}
    
}

dependencies {
    compile "mysql:mysql-connector-java:6.0.5"
}

processResources
{
    def cleanVersion = ""
	def versionArray = project.version.tokenize('-')
	if (versionArray.size() == 3)
	{ cleanVersion = versionArray[1] + "-" + versionArray[2] }
	else 
	{ cleanVersion = versionArray[1] }
		
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", cleanVersion
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':cleanVersion, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from 'build/docs/groovydoc'
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Create API library jar
task libJar(type: Jar) {
    from(sourceSets.main.java) {
        include "eu/usrv/yamcl/lib/**/*"
    }
    classifier = 'lib'
}

// Create Maven source jar
task sourceJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives deobfJar
    archives libJar
    archives groovydocJar
    archives sourceJar
}

uploadArchives {
    repositories {
        mavenDeployer {
			
            repository(url: findProperty('nexusRepositoryUrl') ?: '') {
                authentication(userName: findProperty('nexusUsername') ?: '', password: findProperty('nexusPassword') ?: '')
            }

            pom.project {
                name 'YAMCore'
                packaging 'jar'
                description 'YetAnotherModdingCoreLib'
                url 'http://jenkins.usrv.de/'

                licenses {
                    license {
                        name 'General Public License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}
idea {
    module {
        inheritOutputDirs = true
    }
}

task signJar(dependsOn: 'reobf'){
    doLast {
        ant.signjar(
            destDir: jar.destinationDir,
            jar: jar.getArchivePath(),
            alias: findProperty('keyStoreAlias') ?: '',
            keystore: findProperty('keyStore') ?: '',
            storepass: findProperty('keyStorePass') ?: '',
            digestalg: findProperty('signDigestAlg') ?: '',
            tsaurl: findProperty('signTSAurl') ?: '',
            verbose: true
            )
    }
}
